{"version":3,"sources":["redux/actions.ts","redux/selectors.ts","components/CurrencyExchange.tsx","components/CurrencyEContainer.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","ChangeCurrencyFieldAC","amountOfBYN","amountOfCurrency","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","isBuying","CHANGE_CHANGE_ACTION","selectCurrencyState","state","currency","CurrencyExchange","props","currenciesName","currentCurrency","currencyRate","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","value","data-currency","onChange","className","map","index","onClick","data-action","CurrencyEContainer","dispatch","_useDispatch","ac","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","changeCurrentCurrencyAC","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"0JAEYA,E,6DAAAA,K,+EAAAA,E,mEAAAA,E,0EAAAA,M,KAOL,IAAMC,EAAwB,SACnCC,EACAC,GAFmC,MAIlC,CACCC,KAAMJ,EAAaK,2BACnBC,QAAS,CAAEJ,cAAaC,sBAIfI,EAAiB,SAACC,GAAD,MAC3B,CAAEJ,KAAMJ,EAAaS,qBAAsBH,QAAS,CAAEE,cClBlD,IAAME,EAAsB,SAACC,GAAD,OAA4BA,EAAMC,UCYxDC,EAAwD,SAACC,GAAW,IAEzEC,EAEAD,EAFAC,eAAgBC,EAEhBF,EAFgBE,gBAAiBC,EAEjCH,EAFiCG,aAAcT,EAE/CM,EAF+CN,SAAUN,EAEzDY,EAFyDZ,YAAaC,EAEtEW,EAFsEX,iBAAkBe,EAExFJ,EAFwFI,oBACxFC,EACAL,EADAK,aAAcC,EACdN,EADcM,sBAGZC,EAAeb,EACjB,qCACI,qEAEI,uBAAOc,MAAOpB,EAAaqB,gBAAc,MAAMC,SAAUN,OAE7D,gEACgCF,EADhC,IAEI,uBAAOM,MAAOnB,EAAkBoB,gBAAc,WAAWC,SAAUN,UAK3E,qCACI,iEACiCF,EADjC,IAEI,uBAAOM,MAAOnB,EAAkBoB,gBAAc,WAAWC,SAAUN,OAEvE,oEAEI,uBAAOI,MAAOpB,EAAaqB,gBAAc,MAAMC,SAAUN,UAKrE,OACI,sBAAKO,UAAU,WAAf,UACI,mDACA,sBAAKA,UAAU,iBAAf,UACI,kDACA,6BACKV,EAAeW,KAAI,SAACd,EAAkBe,GACnC,OACI,oBAEIF,UAAS,qBAAgBT,IAAoBJ,EAAW,iBAAmB,MAC3EgB,QAASR,EACTG,gBAAeX,EAJnB,SAMKA,GANL,UACYe,EADZ,YACqBf,YAWrC,sBAAKa,UAAU,kBAAf,UACI,sBAAMA,UAAWjB,EAAW,SAAW,GAAIqB,cAAY,MAAMD,QAAST,EAAtE,iBAGA,sBAAMM,UAAWjB,EAAW,GAAK,SAAUqB,cAAY,OAAOD,QAAST,EAAvE,qBAIJ,sBAAKM,UAAU,SAAf,UACI,gDAAmBR,KAClBI,SChEJS,EAA8C,WAEvD,IAAMC,EHyBH,WACL,IAAMA,EAAWC,cACjB,OAAO,SAACC,GAAD,OAAqBF,EAASE,IG3BlBC,GACbjB,EAAuB,EAHkC,EAKoBkB,YAAYzB,GAArF0B,EALqD,EAKrDA,WAAYpB,EALyC,EAKzCA,gBAAiBR,EALwB,EAKxBA,SAAUN,EALc,EAKdA,YAAaC,EALC,EAKDA,iBAEtDY,EAAiBqB,EAAWV,KAAI,SAACd,GAInC,OAHIA,EAASyB,eAAiBrB,IAC1BC,EAAeT,EAAWI,EAAS0B,QAAU1B,EAAS2B,UAEnD3B,EAASyB,gBAgCpB,OACI,mCACI,cAAC,EAAD,CACItB,eAAgBA,EAChBC,gBAAiBA,EACjBC,aAAcA,EACdT,SAAUA,EACVN,YAAaA,EACbC,iBAAkBA,EAClBe,oBAtCgB,SAACsB,GACzB,IAAIlB,EAAQkB,EAAEC,cAAcnB,MAC5B,GAAKoB,UAAUpB,IACXkB,EAAEC,cAAcE,QAAQ/B,SAAU,CAClC,IAAMgC,EAAkBJ,EAAEC,cAAcE,QAAQ/B,SAGxCmB,EAFQ,QAAZa,EAEa3C,EAAsBqB,EADrB,KAAVA,EACsCA,IAEGuB,OAAOvB,GAAOwB,QAAQ,GAAM7B,GAAc6B,QAAQ,IAIlF7C,EADC,KAAVqB,EAC+BA,IAEEuB,OAAOvB,GAAOwB,QAAQ,GAAK7B,GAAc6B,QAAQ,GAF5CxB,MA0B1CH,aAlBS,SAACqB,GACiB,QAAnCA,EAAEC,cAAcE,QAAQI,OAAmBhB,EAASxB,GAAe,IAASwB,EAASxB,GAAe,KAkB5Fa,sBAfkB,SAACoB,GAC3BA,EAAEC,cAAcE,QAAQ/B,UAAYmB,EH1BL,SAACf,GAAD,MACpC,CACCZ,KAAMJ,EAAagD,wBACnB1C,QAAS,CAAEU,oBGuBsCiC,CAAwBT,EAAEC,cAAcE,QAAQ/B,iBCvCtFsC,MARf,WACI,OACI,qBAAKzB,UAAU,YAAf,SACI,cAAC,EAAD,O,cCQN0B,EAA8B,CAClCf,WAAY,CACV,CACEC,aAAc,MACdC,QAAS,KACTC,SAAU,MAEZ,CACEF,aAAc,MACdC,QAAS,IACTC,SAAU,MAEZ,CACEF,aAAc,MACdC,QAAS,MACTC,SAAU,QAGdvB,gBAAiB,MACjBR,UAAU,EACVN,YAAa,GACbC,iBAAkB,ICjCdiD,EAAWC,YAAgB,CAC/BzC,SDmC6B,WAGV,IAFnBD,EAEkB,uDAFKwC,EACvBJ,EACkB,uCAClB,OAAQA,EAAO3C,MACb,KAAKJ,EAAagD,wBAQlB,KAAKhD,EAAaS,qBAChB,OAAO,uCACFE,GACAoC,EAAOzC,SAFZ,IAGEJ,YAAa,GACbC,iBAAkB,KAEtB,KAAKH,EAAaK,2BAChB,OAAO,2BACFM,GACAoC,EAAOzC,SAEd,QACE,OAAOK,MCzDA2C,EAAeC,YAAYH,GCDxCI,IAASC,OACL,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJI,SAASC,eAAe,W","file":"static/js/main.8459d6f5.chunk.js","sourcesContent":["import { useDispatch as _useDispatch } from \"react-redux\";\n\nexport enum ACTIONS_TYPE {\n  CHANGE_CURRENCY_FIELD_TYPE = \"currency/redux/actions/CHANGE_CURRENCY_FIELD_TYPE\",\n  CHANGE_CHANGE_ACTION = \"currency/redux/actions/CHANGE_CHANGE_ACTION\",\n  CHANGE_CURRENT_CURRENCY = \"currency/redux/actions/CHANGE_CURRENT_CURRENCY\",\n}\n\nexport type ChangeCurrencyFieldType = ReturnType<typeof ChangeCurrencyFieldAC>;\nexport const ChangeCurrencyFieldAC = (\n  amountOfBYN: string,\n  amountOfCurrency: string\n) =>\n  ({\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\n    payload: { amountOfBYN, amountOfCurrency },\n  } as const);\n\nexport type ChangeAction = ReturnType<typeof ChangeActionAC>;\nexport const ChangeActionAC = (isBuying: boolean) =>\n  ({ type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION, payload: { isBuying } } as const);\n\nexport type ChangeCurrentCurrencyType = ReturnType<\n  typeof changeCurrentCurrencyAC\n>;\nexport const changeCurrentCurrencyAC = (currentCurrency: string) =>\n  ({\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\n    payload: { currentCurrency },\n  } as const);\n\n// ActionsType\nexport type ActionsType =\n  | ChangeCurrencyFieldType\n  | ChangeAction\n  | ChangeCurrentCurrencyType;\n\n// Custom useDispatch (experiment)\nexport function useDispatch() {\n  const dispatch = _useDispatch();\n  return (ac: ActionsType) => dispatch(ac);\n}\n","import { GlobalStateType } from \"./state\";\n\nexport const selectCurrencyState = (state: GlobalStateType) => state.currency;\n","import React from 'react'\n\ntype CurrencyExchangePropsType = {\n    currenciesName: string[];\n    currentCurrency: string;\n    currencyRate: number;\n    isBuying: boolean;\n    amountOfBYN: string;\n    amountOfCurrency: string;\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\n};\n\nexport const CurrencyExchange: React.FC<CurrencyExchangePropsType> = (props) => {\n    let {\n        currenciesName, currentCurrency, currencyRate, isBuying, amountOfBYN, amountOfCurrency, changeCurrencyField,\n        changeAction, changeCurrentCurrency\n    } = props\n\n    const viewCurrency = isBuying ? (\n        <>\n            <label>\n                You give the next amount of BYN:\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n            </label>\n            <label>\n                You get the next amount of {currentCurrency}:\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n            </label>\n        </>\n\n    ) : (\n        <>\n            <label>\n                You give the next amount of {currentCurrency}:\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n            </label>\n            <label>\n                You get the next amount of BYN:\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n            </label>\n        </>\n    )\n\n    return (\n        <div className=\"currency\">\n            <h2>Currency exchange</h2>\n            <div className=\"currency-names\">\n                <p>Current currency:</p>\n                <ul>\n                    {currenciesName.map((currency: string, index: number) => {\n                        return (\n                            <li\n                                key={`${index}-${currency}`}\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\n                                onClick={changeCurrentCurrency}\n                                data-currency={currency}\n                            >\n                                {currency}\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n            <div className=\"currency-action\">\n                <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\n                    Buy\n        </span>\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\n                    Sell\n        </span>\n            </div>\n            <div className=\"fields\">\n                <p>Currency rate: {currencyRate}</p>\n                {viewCurrency}\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n    ChangeActionAC,\n    ChangeCurrencyFieldAC,\n    changeCurrentCurrencyAC,\n    useDispatch\n} from '../redux/actions'\nimport { selectCurrencyState } from '../redux/selectors'\nimport { CurrencyExchange } from './CurrencyExchange'\n\nexport const CurrencyEContainer: React.FunctionComponent = () => {\n\n    const dispatch = useDispatch() // in actions there's a custom useDispatch, which is imported here\n    let currencyRate: number = 0\n\n    const { currencies, currentCurrency, isBuying, amountOfBYN, amountOfCurrency } = useSelector(selectCurrencyState)\n\n    const currenciesName = currencies.map((currency) => {\n        if (currency.currencyName === currentCurrency) {\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate\n        }\n        return currency.currencyName\n    })\n\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.value\n        if (!isFinite(+value)) return\n        if (e.currentTarget.dataset.currency) {\n            const trigger: string = e.currentTarget.dataset.currency\n            if (trigger === 'byn') {\n                if (value === '') {\n                    dispatch(ChangeCurrencyFieldAC(value, value))\n                } else {\n                    dispatch(ChangeCurrencyFieldAC(value, (+(Number(value).toFixed(2)) / currencyRate).toFixed(2)))\n                }\n            } else {\n                if (value === '') {\n                    dispatch(ChangeCurrencyFieldAC(value, value))\n                } else {\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value))\n                }\n            }\n        }\n    }\n\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false))\n    }\n\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\n        e.currentTarget.dataset.currency && dispatch(changeCurrentCurrencyAC(e.currentTarget.dataset.currency))\n    }\n\n    return (\n        <>\n            <CurrencyExchange\n                currenciesName={currenciesName}\n                currentCurrency={currentCurrency}\n                currencyRate={currencyRate}\n                isBuying={isBuying}\n                amountOfBYN={amountOfBYN}\n                amountOfCurrency={amountOfCurrency}\n                changeCurrencyField={changeCurrencyField}\n                changeAction={changeAction}\n                changeCurrentCurrency={changeCurrentCurrency}\n            />\n        </>\n    )\n}\n","import React from 'react'\nimport './App.css'\nimport { CurrencyEContainer } from './components/CurrencyEContainer'\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <CurrencyEContainer />\n        </div>\n    )\n}\n\nexport default App\n","import { ACTIONS_TYPE, ActionsType } from \"./actions\";\n\ntype CurrencyType = {\n  currencyName: string;\n  buyRate: number;\n  sellRate: number;\n};\nexport type CurrencyState = {\n  currencies: Array<CurrencyType>;\n  currentCurrency: string;\n  isBuying: boolean;\n  amountOfBYN: string;\n  amountOfCurrency: string;\n};\n\nconst initialState: CurrencyState = {\n  currencies: [\n    {\n      currencyName: \"USD\",\n      buyRate: 2.62,\n      sellRate: 2.58,\n    },\n    {\n      currencyName: \"EUR\",\n      buyRate: 3.1,\n      sellRate: 3.06,\n    },\n    {\n      currencyName: \"RUR\",\n      buyRate: 0.0345,\n      sellRate: 0.0341,\n    },\n  ],\n  currentCurrency: \"USD\",\n  isBuying: true,\n  amountOfBYN: \"\",\n  amountOfCurrency: \"\",\n};\n\nexport const currencyReducer = (\n  state: CurrencyState = initialState,\n  action: ActionsType\n): CurrencyState => {\n  switch (action.type) {\n    case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\n      return {\n        ...state,\n        ...action.payload,\n        amountOfBYN: \"\",\n        amountOfCurrency: \"\",\n      };\n\n    case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\n      return {\n        ...state,\n        ...action.payload,\n        amountOfBYN: \"\",\n        amountOfCurrency: \"\",\n      };\n    case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, Store } from \"redux\";\nimport { currencyReducer } from \"./currencyReducer\";\n\nconst reducers = combineReducers({\n  currency: currencyReducer,\n});\nexport type GlobalStateType = ReturnType<typeof reducers>;\n\nexport const store: Store = createStore(reducers);\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/state'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}